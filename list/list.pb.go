// Code generated by protoc-gen-go. DO NOT EDIT.
// source: list.proto

/*
Package list is a generated protocol buffer package.

It is generated from these files:
	list.proto

It has these top-level messages:
	NodeRequest
	NodeResponse
	Nodes
	LinkRequest
*/
package list

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The data that need to be added to the list.
type NodeRequest struct {
	Data int32 `protobuf:"varint,1,opt,name=data" json:"data,omitempty"`
}

func (m *NodeRequest) Reset()                    { *m = NodeRequest{} }
func (m *NodeRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeRequest) ProtoMessage()               {}
func (*NodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeRequest) GetData() int32 {
	if m != nil {
		return m.Data
	}
	return 0
}

// Success or failure message.
type NodeResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *NodeResponse) Reset()                    { *m = NodeResponse{} }
func (m *NodeResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeResponse) ProtoMessage()               {}
func (*NodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Nodes struct {
	Node int32 `protobuf:"varint,1,opt,name=node" json:"node,omitempty"`
}

func (m *Nodes) Reset()                    { *m = Nodes{} }
func (m *Nodes) String() string            { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()               {}
func (*Nodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Nodes) GetNode() int32 {
	if m != nil {
		return m.Node
	}
	return 0
}

type LinkRequest struct {
}

func (m *LinkRequest) Reset()                    { *m = LinkRequest{} }
func (m *LinkRequest) String() string            { return proto.CompactTextString(m) }
func (*LinkRequest) ProtoMessage()               {}
func (*LinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*NodeRequest)(nil), "list.NodeRequest")
	proto.RegisterType((*NodeResponse)(nil), "list.NodeResponse")
	proto.RegisterType((*Nodes)(nil), "list.Nodes")
	proto.RegisterType((*LinkRequest)(nil), "list.LinkRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for List service

type ListClient interface {
	// Adding a new nodes to the linked list
	InsertNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	// Printing the Linked List
	Printing(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (List_PrintingClient, error)
}

type listClient struct {
	cc *grpc.ClientConn
}

func NewListClient(cc *grpc.ClientConn) ListClient {
	return &listClient{cc}
}

func (c *listClient) InsertNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := grpc.Invoke(ctx, "/list.List/InsertNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Printing(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (List_PrintingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_List_serviceDesc.Streams[0], c.cc, "/list.List/Printing", opts...)
	if err != nil {
		return nil, err
	}
	x := &listPrintingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type List_PrintingClient interface {
	Recv() (*Nodes, error)
	grpc.ClientStream
}

type listPrintingClient struct {
	grpc.ClientStream
}

func (x *listPrintingClient) Recv() (*Nodes, error) {
	m := new(Nodes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for List service

type ListServer interface {
	// Adding a new nodes to the linked list
	InsertNode(context.Context, *NodeRequest) (*NodeResponse, error)
	// Printing the Linked List
	Printing(*LinkRequest, List_PrintingServer) error
}

func RegisterListServer(s *grpc.Server, srv ListServer) {
	s.RegisterService(&_List_serviceDesc, srv)
}

func _List_InsertNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).InsertNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/list.List/InsertNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).InsertNode(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Printing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LinkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ListServer).Printing(m, &listPrintingServer{stream})
}

type List_PrintingServer interface {
	Send(*Nodes) error
	grpc.ServerStream
}

type listPrintingServer struct {
	grpc.ServerStream
}

func (x *listPrintingServer) Send(m *Nodes) error {
	return x.ServerStream.SendMsg(m)
}

var _List_serviceDesc = grpc.ServiceDesc{
	ServiceName: "list.List",
	HandlerType: (*ListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertNode",
			Handler:    _List_InsertNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Printing",
			Handler:       _List_Printing_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "list.proto",
}

func init() { proto.RegisterFile("list.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x41, 0x8f, 0x82, 0x40,
	0x0c, 0x85, 0x21, 0x81, 0x5d, 0x52, 0x76, 0x0f, 0xf6, 0x44, 0xf0, 0xa2, 0x73, 0xe2, 0x44, 0x8c,
	0xc6, 0x1f, 0x61, 0x42, 0x8c, 0xe1, 0x1f, 0x20, 0x34, 0x66, 0xa2, 0xce, 0x20, 0x2d, 0xff, 0xdf,
	0xcc, 0x20, 0x91, 0xdb, 0x6b, 0xf3, 0xde, 0xeb, 0x57, 0x80, 0x87, 0x66, 0x29, 0xfb, 0xc1, 0x8a,
	0xc5, 0xc8, 0x69, 0xb5, 0x85, 0xf4, 0x6c, 0x3b, 0xaa, 0xe9, 0x35, 0x12, 0x0b, 0x22, 0x44, 0x5d,
	0x23, 0x4d, 0x16, 0x6e, 0xc2, 0x22, 0xae, 0xbd, 0x56, 0x05, 0xfc, 0x4d, 0x16, 0xee, 0xad, 0x61,
	0xc2, 0x0c, 0x7e, 0x79, 0x6c, 0x5b, 0x62, 0xf6, 0xb6, 0xa4, 0x9e, 0x47, 0xb5, 0x86, 0xd8, 0x39,
	0xd9, 0xd5, 0x18, 0xdb, 0xd1, 0x5c, 0xe3, 0xb4, 0xfa, 0x87, 0xb4, 0xd2, 0xe6, 0xfe, 0xb9, 0xb4,
	0x7f, 0x42, 0x54, 0x69, 0x16, 0x3c, 0x02, 0x9c, 0x0c, 0xd3, 0x20, 0x2e, 0x89, 0xab, 0xd2, 0x13,
	0x2e, 0x90, 0x72, 0x5c, 0xae, 0x26, 0x04, 0x15, 0x60, 0x09, 0xc9, 0x65, 0xd0, 0x46, 0xb4, 0xb9,
	0xcd, 0xa1, 0x45, 0x7b, 0x9e, 0x7e, 0x43, 0xac, 0x82, 0x5d, 0x78, 0xfd, 0xf1, 0x4f, 0x1f, 0xde,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x81, 0x27, 0xa5, 0x02, 0x01, 0x00, 0x00,
}
